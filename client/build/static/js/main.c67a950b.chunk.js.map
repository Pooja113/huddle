{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","className","style","marginTop","isLoading","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","bg","w","borderRadius","borderWidth","isFitted","variant","mb","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","d","base","icon","View","isCentered","fontSize","fontFamily","justifyContent","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","colorScheme","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c67a950b.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport './Login.css'\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    // console.log(email, password);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      // console.log(JSON.stringify(data));\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        className=\"login__button\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        className=\"login__button\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport './Homepage.css'\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <div className=\"heading__box\" >\n        <div className=\"app__heading\">\n          Huddle\n        </div>\n      </div>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\" className=\"tabs__style\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser?._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n//import { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#f57079\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} className=\"login__button\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      \n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#f57079\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    \n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <div className=\"app__heading__chat\">\n          Huddle\n        </div>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"90vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}